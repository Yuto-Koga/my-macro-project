#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OECD Growth Accounting with PIM‐based Capital Stock
Loads PWT 9.0 directly from URL via pandas.read_stata, rebuilds K by PIM,
computes Solow‐residual TFP, capital deepening, and shares for OECD countries (1990–2019).
"""

import pandas as pd
import numpy as np

# ──────────────────────────────────────────────────────────────────────────
START_YEAR   = 1990
END_YEAR     = 2019
PWT_URL      = "https://www.rug.nl/ggdc/docs/pwt90.dta"  # direct URL to PWT 9.0 Stata file

OECD_COUNTRIES = [
    "United Kingdom", "United States", "Australia", "Austria", "Belgium",
    "Canada", "Denmark", "Finland", "France", "Germany", "Greece",
    "Iceland", "Ireland", "Italy", "Japan", "Netherlands", "New Zealand",
    "Norway", "Portugal", "Spain", "Sweden", "Switzerland"
]

REQUIRED_COLS = [
    "countrycode", "country", "year",
    "rgdpo",   # real GDP (output-side, constant 2017 USD)
    "csh_i",   # investment share of GDP
    "delta",   # depreciation rate
    "emp",     # employment
    "avh",     # average hours worked
    "hc",      # human capital index
    "labsh",   # labor share
]

def load_pwt() -> pd.DataFrame:
    """Load PWT 9.0 from the GGDC URL, selecting only needed columns."""
    return pd.read_stata(PWT_URL, columns=REQUIRED_COLS)

def prep_panel(df: pd.DataFrame) -> pd.DataFrame:
    """
    Filter OECD and years; compute investment flow, clip δ;
    rebuild capital stock via PIM; define efficiency labor; smooth α;
    add log‐levels for growth accounting.
    """
    # filter by year and country
    df = df[df["year"].between(START_YEAR, END_YEAR)]
    df = df[df["country"].isin(OECD_COUNTRIES)].copy()

    # investment flow I_t and clip depreciation
    df["I"]     = df["csh_i"] * df["rgdpo"]
    df["delta"] = df["delta"].clip(lower=0.01, upper=0.15)

    # rebuild capital stock K_pim via Perpetual Inventory Method
    df["K_pim"] = np.nan
    for code, grp in df.groupby("countrycode"):
        grp = grp.sort_values("year")
        I_vals     = grp["I"].values
        δ_vals     = grp["delta"].values

        # approximate average investment growth rate g
        g_vals   = np.log(I_vals[1:] / I_vals[:-1])
        g_approx = max(np.nanmean(g_vals), 0.01)

        # initial capital K0 = I0 / (g + δ0)
        K_list = [I_vals[0] / (g_approx + δ_vals[0])]
        for t in range(1, len(grp)):
            K_list.append((1 - δ_vals[t]) * K_list[-1] + I_vals[t])

        df.loc[grp.index, "K_pim"] = K_list

    # total hours and efficient labor
    df["hours"] = df["emp"] * df["avh"]
    df = df[df["hours"] > 0]
    df["EffL"]  = df["hours"] * df["hc"]
    df = df[df["EffL"] > 0]

    # smooth capital share α via 5‐year moving average
    df["alpha_raw"] = (1 - df["labsh"]).clip(0.2, 0.8)
    df["alpha"] = (
        df.sort_values(["countrycode", "year"])
          .groupby("countrycode")["alpha_raw"]
          .transform(lambda x: x.rolling(window=5, min_periods=1).mean())
    )

    # log‐levels per efficiency labor
    df["lnY_e"]   = np.log(df["rgdpo"]  / df["EffL"])
    df["lnK_e"]   = np.log(df["K_pim"] / df["EffL"])
    df["lnA_res"] = df["lnY_e"] - df["alpha"] * df["lnK_e"]

    return df.sort_values(["countrycode", "year"])

def compute_summary(df: pd.DataFrame) -> pd.DataFrame:
    """
    Compute country‐level mean annual growth rates and contributions,
    then append an OECD average row.
    """
    records = []
    for code, grp in df.groupby("countrycode"):
        grp = grp.sort_values("year")
        dY = grp["lnY_e"].diff()
        dK = grp["lnK_e"].diff()
        dA = grp["lnA_res"].diff()
        ᾱ  = 0.5 * (grp["alpha"].shift() + grp["alpha"])
        cK = ᾱ * dK

        Gy = dY.mean() * 100
        GA = dA.mean() * 100
        CK = cK.mean() * 100

        records.append({
            "Country":                grp["country"].iat[0],
            "Growth Rate (Y/EffL %)": round(Gy, 2),
            "TFP Growth %":           round(GA, 2),
            "Capital Deepening %":    round(CK, 2),
            "TFP Share":              round(GA / Gy, 2) if Gy else np.nan,
            "Capital Share":          round(CK / Gy, 2) if Gy else np.nan,
        })

    summary = pd.DataFrame.from_records(records)
    # append OECD average
    avg = summary.drop(columns="Country").mean(numeric_only=True)
    avg["Country"] = "OECD Average"
    return pd.concat([summary, avg.to_frame().T], ignore_index=True)

def main():
    # 1. Load data
    df_raw  = load_pwt()
    # 2. Prepare panel
    panel   = prep_panel(df_raw)
    # 3. Compute summary table
    summary = compute_summary(panel)
    # 4. Print results
    print(summary.to_string(index=False))

if __name__ == "__main__":
    main()
