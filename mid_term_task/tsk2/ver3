#!/usr/bin/env python3
from __future__ import annotations
import pandas as pd
import numpy as np

# ──────────────────────────────────────────────────────────────────────────
START_YEAR = 1990
END_YEAR   = 2019
PWT_URL    = "https://www.rug.nl/ggdc/docs/pwt90.dta"

# OECD 加盟国の名称リスト（PWT の country カラムに合わせる）
OECD_COUNTRIES = [
    "United Kingdom", "United States", "Australia", "Austria", "Belgium",
    "Canada", "Denmark", "Finland", "France", "Germany", "Greece",
    "Iceland", "Ireland", "Italy", "Japan", "Netherlands", "New Zealand",
    "Norway", "Portugal", "Spain", "Sweden", "Switzerland",
]

def load_pwt() -> pd.DataFrame:
    """
    PWT から必要な変数を読み込む
    """
    cols = [
        "countrycode", "country", "year",
        "rgdpo",   # 実質GDP
        "rkna",    # 実質資本ストック
        "csh_i",   # 投資のGDPシェア
        "delta",   # 減価償却率
        "emp",     # 就業者数
        "avh",     # 平均労働時間
        "hc",      # 人的資本指数
        "labsh",   # 労働分配率
    ]
    return pd.read_stata(PWT_URL, columns=cols)

def prep_panel(df: pd.DataFrame) -> pd.DataFrame:
    """
    疑似的な資本サービス量を構築し、成長会計に必要な前処理を行う
    """
    df = df[df["year"].between(START_YEAR, END_YEAR)].copy()

    # 投資フロー I_t = csh_i * rgdpo
    df["I"] = df["csh_i"] * df["rgdpo"]
    # 減価償却フロー Dep_t = delta * rkna
    df["Dep"] = df["delta"] * df["rkna"]
    # 疑似資本サービス量 K_service = I + Dep
    df["K_service"] =  df["Dep"]

    # 総労働時間 H
    df["hours"] = df["emp"] * df["avh"]
    df = df[df["hours"] > 0]

    # 効率労働 EffL = H × hc
    df["EffL"] = df["hours"] * df["hc"]
    df = df[df["EffL"] > 0]

    # 資本分配率 α_t = 1 - labsh
    df["alpha"] = (1 - df["labsh"]).clip(0, 1)

    # 対数レベル（EffLあたり）
    df["lnY_e"]  = np.log(df["rgdpo"]    / df["EffL"])
    df["lnK_e"]  = np.log(df["K_service"] / df["EffL"])
    # ソロー残差型TFP（EffLあたり）
    df["lnA_res"] = df["lnY_e"] - df["alpha"] * df["lnK_e"]

    df.sort_values(["countrycode", "year"], inplace=True)
    return df

def compute_country(df_cty: pd.DataFrame) -> pd.DataFrame:
    """
    国別に Δln を計算し、資本深化の寄与を求める
    """
    g_ye = df_cty["lnY_e"].diff()
    g_ke = df_cty["lnK_e"].diff()
    g_Ar = df_cty["lnA_res"].diff()
    alpha_bar = 0.5 * (df_cty["alpha"].shift() + df_cty["alpha"])
    cap_deep = alpha_bar * g_ke

    return pd.DataFrame({
        "countrycode": df_cty["countrycode"],
        "country":     df_cty["country"],
        "year":        df_cty["year"],
        "g_Y/E":       g_ye,
        "g_A":         g_Ar,
        "contrib_k":   cap_deep
    }).dropna().reset_index(drop=True)

def period_average(panel: pd.DataFrame) -> pd.Series:
    """
    年平均の成長率と寄与率を算出
    """
    g_y = panel["g_Y/E"].mean() * 100
    g_A = panel["g_A"].mean()   * 100
    cap = panel["contrib_k"].mean() * 100

    tfp_share = g_A / g_y if g_y else np.nan
    cap_share = cap / g_y if g_y else np.nan

    return pd.Series({
        "countrycode":            panel["countrycode"].iloc[0],
        "country":                panel["country"].iloc[0],
        "Growth Rate (Y/EffL %)": round(g_y, 2),
        "TFP Growth %":           round(g_A, 2),
        "Capital Deepening %":    round(cap, 2),
        "TFP Share":              round(tfp_share, 2),
        "Capital Share":          round(cap_share, 2),
    })

def main() -> None:
    # データ読み込み・前処理
    df_raw = load_pwt()
    panel  = prep_panel(df_raw)

    # 国別寄与計算
    contrib = (
        panel
        .groupby("countrycode", sort=False)
        .apply(compute_country)
        .reset_index(drop=True)
    )

    # 平均値集計（OECD諸国のみ）
    summary_all = (
        contrib
        .groupby("countrycode", sort=False)
        .apply(period_average)
        .reset_index(drop=True)
    )

    # OECD 諸国に絞り込み
    summary_oecd = summary_all[summary_all["country"].isin(OECD_COUNTRIES)].copy()

    # 全OECD平均行の追加
    avg = summary_oecd.drop(columns=["countrycode", "country"]).mean(numeric_only=True)
    avg["countrycode"], avg["country"] = "OECD_AVG", "OECD Average"
    summary_oecd = pd.concat([summary_oecd, avg.to_frame().T], ignore_index=True)

    # 結果出力
    cols = [
        "country",
        "Growth Rate (Y/EffL %)",
        "TFP Growth %",
        "Capital Deepening %",
        "TFP Share",
        "Capital Share"
    ]
    print(summary_oecd[cols].to_string(index=False))

if __name__ == "__main__":
    main()
